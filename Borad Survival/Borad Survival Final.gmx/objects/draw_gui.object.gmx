<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI

draw_set_color(c_black);
draw_sprite(gui,0,view_xview[0] + view_wview[0]/2, view_yview[0] + view_hview[0] - 64); // Draws the GUI Box for the healthbar and expbar
//Draw Level Box
draw_sprite(level_box,0,view_xview[0] + view_wview[0]/2 - 200 + 64, view_yview[0] + view_hview[0] - 64 - 18); // Draws the level box
//Draw Level Number
draw_set_font(levelnum_text);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_text(view_xview[0] + view_wview[0]/2 - 200 + 64, view_yview[0] + view_hview[0] - 64 - 18, string(global.level)); // Draws the level text


//Draw Healthbar
image_speed = 0;
draw_set_font(healthbar_text);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_text(view_xview[0] + view_wview[0]/2 - 150, view_yview[0] + view_hview[0] - 55, "Health: " + string(global.hp) + " / " + string(global.maxhp)); // Draws the text for the health counter

draw_sprite(healthbar_background,0,view_xview[0] + view_wview[0]/2 - 50, view_yview[0] + view_hview[0] - 45); // Draws the background of the healthbar
if (global.hp &gt;= 0){
    draw_sprite(healthbar_red,49 - round((global.hp / global.maxhp) * 50),view_xview[0] + view_wview[0]/2 - 50, view_yview[0] + view_hview[0] - 45); //Draws the healthbar 
}
draw_sprite(healthbar_border,0,view_xview[0] + view_wview[0]/2 - 50, view_yview[0] + view_hview[0] - 45); // Draws healthbar border

//Draw Expbar
image_speed = 0;
draw_set_font(healthbar_text);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_text(view_xview[0] + view_wview[0]/2 - 150, view_yview[0] + view_hview[0] - 35, "Exp: " + string(global.xp) + " / " + string(global.xpRequired[global.level])); //Draws the EXP text

draw_sprite(healthbar_background,0,view_xview[0] + view_wview[0]/2 - 50, view_yview[0] + view_hview[0] - 25); //Draws the background of the EXP bar
if (global.xp &gt; 0 &amp;&amp; global.level != 30){
    draw_sprite(expbar_gold,49 - round((global.xp / global.xpRequired[global.level])* 50),view_xview[0] + view_wview[0]/2 - 50, view_yview[0] + view_hview[0] - 25); //Draws the EXP bar
}
else if (global.level == 30){
    draw_sprite(expbar_gold,0,view_xview[0] + view_wview[0]/2 - 50, view_yview[0] + view_hview[0] - 25); // Draws full EXP bar if the player is max level
}
draw_sprite(healthbar_border,0,view_xview[0] + view_wview[0]/2 - 50, view_yview[0] + view_hview[0] - 25); // Draws EXP bar border

//Draw Ammo Count
draw_set_font(ammocount_text);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_color(c_black);
weaponName= "";
if (global.buildmode == false){
    switch (global.weaponselected){
        case 1: weaponName = "Slingshot"; break;
        case 2: weaponName = "Rapid Slingshot"; break;
        case 3: weaponName = "Grape Slingshot"; break;
        case 4: weaponName = "Sniper Slingshot"; break;
        case 5: weaponName = "Machine Slingshot"; break;
    }
    draw_text(view_xview[0] + view_wview[0]/2 + 100, view_yview[0] + view_hview[0] - 54, string(weaponName));
    draw_set_font(ammocount2_text);
    draw_text(view_xview[0] + view_wview[0]/2 + 100, view_yview[0] + view_hview[0] - 36, string(global.weaponOwned[global.weaponselected - 1, 1]) + " / " + string(global.weaponOwned[global.weaponselected - 1, 3]));
}
else if (global.buildmode == true){
    
    draw_text(view_xview[0] + view_wview[0]/2 + 100, view_yview[0] + view_hview[0] - 54, string(global.constructOwned[global.constructSelected,0]));
    draw_set_font(ammocount2_text);
    draw_text(view_xview[0] + view_wview[0]/2 + 100, view_yview[0] + view_hview[0] - 36, string(global.constructOwned[global.constructSelected, 2]));
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Picked up items list

for (var o = 0; o &lt; 15; o++){
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    draw_set_font(pickup_text);
    draw_set_color(c_black);
    if (global.pickupList[o,0] != ""){
        //Notifies the player of the wave number
        if (global.pickupList[o,0] == "Wave"){
            draw_text(view_xview[0] + 64, view_yview[0] + view_hview[0] - 30 - (12*o), "It is now " + string(global.pickupList[o,0]) + " " + string(global.pickupList[o,1]));
        }
        //Tells the player doesn't have the gun
        else if (global.pickupList[o,0] == "noWeaponOwned"){
            var nameOfGun;
            switch (global.pickupList[o,1]){
                case 0: nameOfGun = "Slingshot"; break;
                case 1: nameOfGun = "Rapid Slingshot"; break;
                case 2: nameOfGun = "Grape Slingshot"; break;
                case 3: nameOfGun = "Sniper Slingshot"; break;
            }
            draw_text(view_xview[0] + 64, view_yview[0] + view_hview[0] - 30 - (12*o), string(global.characterSelected) + ": I don't have the " + string(nameOfGun));
        }
        //Tells the player he doesn't have enough strawberries to build something
        else if (global.pickupList[o,0] == "noCraft"){
            draw_text(view_xview[0] + 64, view_yview[0] + view_hview[0] - 30 - (12*o), string(global.characterSelected) + ": I don't have enough strawberries to craft this!");
        }
        //Tells the player he doesn't have any more of the construct
        else if (global.pickupList[o,0] == "noMoreConstructOwned"){
            draw_text(view_xview[0] + 64, view_yview[0] + view_hview[0] - 30 - (12*o), string(global.characterSelected) + ": I don't have any more of this construct!");
        }
        //Tells the player he doesn't own the construct selected
        else if (global.pickupList[o,0] == "noConstructOwned"){
            draw_text(view_xview[0] + 64, view_yview[0] + view_hview[0] - 30 - (12*o), string(global.characterSelected) + ": I don't know the " + string(global.constructOwned[global.constructSelected,0]) + " construct!" );
        }
        //Tells the player is reloading
        else if (global.pickupList[o,0] == "Reload"){
            draw_text(view_xview[0] + 64, view_yview[0] + view_hview[0] - 30 - (12*o), string(global.characterSelected) + ": I'm reloading!" );
        }
        //Tells the player that there is no more ammo to reload with
        else if (global.pickupList[o,0] == "noReload"){
            draw_text(view_xview[0] + 64, view_yview[0] + view_hview[0] - 30 - (12*o), string(global.characterSelected) + ": I don't have any extra ammunition!" );
        }
        //Tells the player that there is no more ammo in their gun
        else if (global.pickupList[o,0] == "noAmmo"){
            draw_text(view_xview[0] + 64, view_yview[0] + view_hview[0] - 30 - (12*o), string(global.characterSelected) + ": I don't have any more ammo in this weapon!" );
        }
        //Tells the player that grace period has started and gives the duration
        else if (global.pickupList[o,0] == "Grace"){
            draw_text(view_xview[0] + 64, view_yview[0] + view_hview[0] - 30 - (12*o), "You have a grace period of " + string(global.gracePeriodDuration) + " seconds." );
        }
        //Tells when the grace period ends and tells how many Shawnites are in the wave
        else if (global.pickupList[o,0] == "GraceEnd"){
            draw_text(view_xview[0] + 64, view_yview[0] + view_hview[0] - 30 - (12*o), "Grace period has ended! Here comes " + string(global.pickupList[o,1]) + " Shawnites." );
        }
        //Game a random quote for Borad
        else if (global.pickupList[o,0] == "Quote"){
            draw_text(view_xview[0] + 64, view_yview[0] + view_hview[0] - 30 - (12*o), string(global.characterSelected) + ": " + string(global.quotes[global.pickupList[o,1]]) );
        }
        //Game a random quote for Delgado
        else if (global.pickupList[o,0] == "Quote2"){
            draw_text(view_xview[0] + 64, view_yview[0] + view_hview[0] - 30 - (12*o), string(global.characterSelected) + ": " + string(global.quotes2[global.pickupList[o,1]]) );
        }
        //Game a random quote for Leang
        else if (global.pickupList[o,0] == "Quote3"){
            draw_text(view_xview[0] + 64, view_yview[0] + view_hview[0] - 30 - (12*o), string(global.characterSelected) + ": " + string(global.quotes3[global.pickupList[o,1]]) );
        }
        //The quote stated when the gamestarts
        else if (global.pickupList[o,0] == "QuoteFirst"){
            draw_text(view_xview[0] + 64, view_yview[0] + view_hview[0] - 30 - (12*o), string(global.characterSelected) + ": Time to give these Shawnites... an F" );
        }
        //Tells the player when they have picked up an item or Strawberry
        else {
            draw_text(view_xview[0] + 64, view_yview[0] + view_hview[0] - 30 - (12*o), "You have gained " + string(global.pickupList[o,1]) + " " + string(global.pickupList[o,0]));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Strawberry counters

//Enemies in the wave
draw_sprite(spr_strawberrybox,0,view_xview[0] + view_wview[0]/6 - 100, view_yview[0] + sprite_get_height(spr_strawberrybox)/2);

draw_set_font(strawberrynum_text);
draw_set_valign(fa_middle);
draw_set_halign(fa_left);
draw_set_color(c_black);
draw_text(view_xview[0] + view_wview[0]/6  - 12 - 100, view_yview[0] + sprite_get_height(spr_strawberrybox)/2, string(global.enemiesInWave + instance_number(enemy_superclass))); //Draws text for strawberries

//Strawberries held
draw_sprite(spr_strawberrybox,0,view_xview[0] + view_wview[0]/6, view_yview[0] + sprite_get_height(spr_strawberrybox)/2);

draw_sprite_ext(spr_berry,0,view_xview[0] + view_wview[0]/6 -32, view_yview[0] + sprite_get_height(spr_strawberrybox)/2,0.6,0.6,0,c_white,1); //Draws the sprite of a strawberry for the strawberry counter
draw_set_font(strawberrynum_text);
draw_set_valign(fa_middle);
draw_set_halign(fa_left);
draw_set_color(c_black);
draw_text(view_xview[0] + view_wview[0]/6  - 12, view_yview[0] + sprite_get_height(spr_strawberrybox)/2, string(global.holdingBerry) + " / " + string(global.berryLimit)); //Draws text for strawberries

//Strawberries in base
draw_sprite(spr_strawberrybox,0,view_xview[0] + view_wview[0]/6 + 100, view_yview[0] + sprite_get_height(spr_strawberrybox)/2);

draw_sprite_ext(spr_berry,0,view_xview[0] + view_wview[0]/6 -32 + 100, view_yview[0] + sprite_get_height(spr_strawberrybox)/2,0.6,0.6,0,c_white,1); //Draws the sprite of a strawberry for the strawberry counter
draw_set_font(strawberrynum_text);
draw_set_valign(fa_middle);
draw_set_halign(fa_left);
draw_set_color(c_black);
draw_text(view_xview[0] + view_wview[0]/6  - 12 + 100, view_yview[0] + sprite_get_height(spr_strawberrybox)/2, string(global.totalStrawberries)); //Draws text for strawberries

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
