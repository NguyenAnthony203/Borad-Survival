<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_borad</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>mask_borites</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initializes Variables
shootCooldown = 0;
buildCooldown = 0;
maxBuildCooldown = global.buildCooldown;
reloadTimer = 0;
global.buidmode = true;
clickCD = 0;
constructSelected = "Spikes";
relayMessage = 0;
maxRelayMessage = 192;
spriteChange = 640;
object = noone;

image_speed = 0;
image_index = 0;
image_angle = 0;
image_xscale = 1;
image_yscale = image_xscale;
facingdirection = 1; //1 is right, 0 is left
carryingBerry = false;
buildMode = false;
depth = -1;

//For the fun of it
randomQuoteTimer = 32;
Quote = 0;

//Draw sprite
if (global.characterSelected == "Borad"){
    sprite_index = spr_borad;
}
else if (global.characterSelected == "Delgado"){
    sprite_index = spr_delgado;
}
else if (global.characterSelected == "Leang"){
    sprite_index = spr_leang;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls Cooldown Variables
if (!global.pause){
    if (shootCooldown &gt; 0) shootCooldown--;
    if (buildCooldown &gt; 0) buildCooldown--;
    if (global.cc &gt; 0) global.cc--;
    if (clickCD &gt; 0) clickCD--;
    if (reloadTimer &gt; 0) reloadTimer--;
    if (relayMessage &gt; 0) relayMessage--;
    if (spriteChange &gt; 0 &amp;&amp; global.characterSelected == "Leang") spriteChange--;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause function
if (keyboard_check_pressed(ord('C')) &amp;&amp; distance_to_object(obj_anvil) &lt; 12){
    if (global.pause == false){
        global.pause = true;
        instance_create(x,y,obj_craftDraw);
        x = obj_anvil.x;
        y = obj_anvil.y;
    }
    else if (global.pause == true){
        global.pause = false;
        if (instance_exists(obj_craftDraw)){
            with (obj_craftDraw){
                instance_destroy();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//Limit player x and y coords to be inside the room
x = clamp(x,0,room_width);
y = clamp(y,0,room_height);
if (global.pause == false){
//Movement speed 
if (global.characterSelected == "Borad"){
    global.mspeed = (global.baseMS + 1) / (ceil(buildCooldown/100) + 1);
}
else if (global.characterSelected == "Delgado" || global.characterSelected == "Leang"){
    global.mspeed = global.baseMS / (ceil(buildCooldown/100) + 1);
}
//The actual moving
if (global.cc &lt; 1 &amp;&amp; !global.pause){
    if keyboard_check(ord('A'))
        {
        if !keyboard_check(ord('W')) and !keyboard_check(ord('S'))
            {
            facingdirection = 0;
            hspeed = -global.mspeed;
            }
        if keyboard_check(ord('W'))
            {
            facingdirection = 0;
            hspeed = -global.mspeed / sqrt(2);
            vspeed = -global.mspeed / sqrt(2);
            }
        if keyboard_check(ord('S'))
            {
            facingdirection = 0;
            hspeed = -global.mspeed / sqrt(2);
            vspeed = global.mspeed / sqrt(2);
            }   
        };
        
    if keyboard_check(ord('D'))
        {
        if !keyboard_check(ord('W')) and !keyboard_check(ord('S'))
            {
            facingdirection = 1;
            hspeed = global.mspeed;
            }
        if keyboard_check(ord('W'))
            {
            facingdirection = 1;
            hspeed = global.mspeed / sqrt(2);
            vspeed = -global.mspeed / sqrt(2);
            }
        if keyboard_check(ord('S'))
            {
            facingdirection = 1;
            hspeed = global.mspeed / sqrt(2);
            vspeed = global.mspeed / sqrt(2);
            }  
        };
        
    if keyboard_check(ord('W')) and !keyboard_check(ord('A')) and !keyboard_check(ord('D'))
        {
        vspeed = -global.mspeed;
        };
        
    if keyboard_check(ord('S')) and !keyboard_check(ord('A')) and !keyboard_check(ord('D'))
        {
        vspeed = global.mspeed;
        };
    
    if !keyboard_check(ord('A')) and !keyboard_check(ord('D'))
        {
        hspeed = 0
        };
        
    if !keyboard_check(ord('W')) and !keyboard_check(ord('S'))
        {
        vspeed = 0
        };
    }

    if !keyboard_check(ord('A')) and !keyboard_check(ord('D')) and !keyboard_check(ord('W')) and !keyboard_check(ord('S')){
            friction = 1;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Basic Stuff
if (global.hp &gt; global.maxhp){
    global.hp = global.maxhp;
}
if (global.pause == false){
if (facingdirection == 1){
    image_xscale = 1;
    image_yscale = 1;
}
else {
    image_xscale = -1;
    image_yscale = 1;
}

//Change the sprite if you are Leang
if (global.characterSelected == "Leang" &amp;&amp; spriteChange &lt;= 0){
    image_index = floor(random(3));
    spriteChange = 192 + floor(random(5))*64;
}
}
//Draw sprite
if (global.characterSelected == "Borad"){
    sprite_index = spr_borad;
}
else if (global.characterSelected == "Delgado"){
    sprite_index = spr_delgado;
}
else if (global.characterSelected == "Leang"){
    sprite_index = spr_leang;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shooting and Reloading
if (global.pause == false){
if (reloadTimer == 1){
    reloadWeapon(global.weaponselected);
}
if (keyboard_check_pressed(ord('R')) &amp;&amp; !global.buildmode){
    if (global.weaponOwned[global.weaponselected - 1, 1] &lt; global.weaponOwned[global.weaponselected - 1, 2] &amp;&amp; global.weaponOwned[global.weaponselected - 1, 3] &gt; 0 &amp;&amp; reloadTimer &lt;= 0){
        reloadTimer = global.weaponOwned[global.weaponselected - 1, 4];
        shiftPickupList("Reload",0);
    }
    else if (global.weaponOwned[global.weaponselected - 1, 3]  &lt;= 0){
        shiftPickupList("noReload",0);
    }
}

if (global.weaponOwned[global.weaponselected - 1, 1] == 0 &amp;&amp; global.weaponOwned[global.weaponselected - 1,3] &gt; 0 &amp;&amp; reloadTimer &lt;= 0){
    reloadTimer = global.weaponOwned[global.weaponselected - 1, 4];
    shiftPickupList("Reload",0);
}
if (mouse_check_button_pressed(mb_left) &amp;&amp; !global.buildmode){
    if (global.weaponOwned[global.weaponselected - 1, 1] == 0 &amp;&amp; global.weaponOwned[global.weaponselected - 1, 3] == 0 &amp;&amp; reloadTimer &lt;= 0){
        shiftPickupList("noAmmo",0);
    }
}
if (mouse_check_button(mb_left)){
    if (self.shootCooldown &lt;= 0 &amp;&amp; reloadTimer &lt;= 0 &amp;&amp; !global.buildmode){
    // Slingshot
        if (global.weaponselected == 1 &amp;&amp; global.weaponOwned[0,1] &gt; 0){
        global.weaponOwned[0,1] -= 1;
        var i, spread, bulletDamage, damageRange;
        spread = 2;
        bulletDamage = 18;
        damageRange = 4;
        i = instance_create(x,y, obj_pebbleproj2);
        i.image_xscale = 0.9;
        i.image_yscale = i.image_xscale;
        i.image_angle = random(360);
        i.damage = bulletDamage + round(random(damageRange*2)) - damageRange;
        i.direction += random(spread*2) - spread;
        self.shootCooldown = 32;
        }
    // Rapid Slingshot
        if (global.weaponselected == 2 &amp;&amp; global.weaponOwned[1,1] &gt; 0){
        global.weaponOwned[1,1] -= 1;
        var i, spread, damageRange, bulletDamage;
        bulletDamage = 8;
        spread = 3;
        damageRange = 3;
        i = instance_create(x,y, obj_pebbleproj);
        i.image_xscale = 0.6;
        i.image_yscale = i.image_yscale;
        i.damage = bulletDamage + round(random(damageRange*2)) - damageRange;
        i.image_angle = random(360);
        i.direction += random(spread*2) - spread;
        self.shootCooldown = 8;
        }
    // Grape Slingshot
        if (global.weaponselected == 3 &amp;&amp; global.weaponOwned[2,1] &gt; 0){
        global.weaponOwned[2,1] -= 1;
        var i,spread,pelletDamage, damageRange, Speed;
        spread = 2;
        Speed = 4 ;
        pelletDamage = 13;
        damageRange = 4;
        //Middle Bullet
        i = instance_create(x,y, obj_pebbleproj2);
        i.image_angle = random(360);
        i.damage = pelletDamage + round(random(damageRange*2)) - damageRange;
        i.speed += Speed;
        
        //Bullets to the right
        i = instance_create(x,y, obj_pebbleproj2);
        i.image_angle = random(360);
        i.damage = pelletDamage + round(random(damageRange*2)) - damageRange;
        i.speed += Speed;
        i.direction += spread/2 + random(spread);
        //And anotha one
        i = instance_create(x,y, obj_pebbleproj2);
        i.image_angle = random(360);
        i.damage = pelletDamage + round(random(damageRange*2)) - damageRange;
        i.speed += Speed;
        i.direction += spread + random(spread)*2;
        //And anotha one
        i = instance_create(x,y, obj_pebbleproj2);
        i.image_angle = random(360);
        i.damage = pelletDamage + round(random(damageRange*2)) - damageRange;
        i.speed += Speed;
        i.direction += spread*(3/2) + random(spread)*3;
        //And anotha one
        i = instance_create(x,y, obj_pebbleproj2);
        i.image_angle = random(360);
        i.damage = pelletDamage + round(random(damageRange*2)) - damageRange;
        i.speed += Speed;
        i.direction += spread*2 + random(spread)*4;
        
        //Bullets to the right
        i = instance_create(x,y, obj_pebbleproj2);
        i.image_angle = random(360);
        i.damage = pelletDamage + round(random(damageRange*2)) - damageRange;
        i.speed += Speed;
        i.direction-= spread/2 + random(spread);
        //And anotha one
        i = instance_create(x,y, obj_pebbleproj2);
        i.image_angle = random(360);
        i.damage = pelletDamage + round(random(damageRange*2)) - damageRange;
        i.speed += Speed;
        i.direction -= spread + random(spread)*2;
        //And anotha one
        i = instance_create(x,y, obj_pebbleproj2);
        i.image_angle = random(360);
        i.damage = pelletDamage + round(random(damageRange*2)) - damageRange;
        i.speed += Speed;
        i.direction -= spread*(3/2) + random(spread)*3;
        //And anotha one
        i = instance_create(x,y, obj_pebbleproj2);
        i.image_angle = random(360);
        i.damage = pelletDamage + round(random(damageRange*2)) - damageRange;
        i.speed += Speed;
        i.direction -= spread*2 + random(spread)*4;
        self.shootCooldown = 72;
        }
    // Sniper Slingshot
        if (global.weaponselected == 4 &amp;&amp; global.weaponOwned[3,1] &gt; 0){
        global.weaponOwned[3,1] -= 1;
        var i, spread;
        spread = 0.5;
        i = instance_create(x,y, obj_pebbleproj3);
        i.image_angle = random(360);
        i.damage = 35 + floor(random(11));
        i.xscale = 0.5;
        i.yscale = i.xscale;
        i.direction += random(spread*2) - spread;
        self.shootCooldown = 96;
        }
    // Machine Slingshot
        if (global.weaponselected == 5 &amp;&amp; global.weaponOwned[4,1] &gt; 0){
        global.weaponOwned[4,1] -= 1;
        var i, spread, damageRange, bulletDamage;
        bulletDamage = 11;
        spread = 8;
        damageRange = 4;
        i = instance_create(x,y, obj_pebbleproj);
        i.image_xscale = 0.6;
        i.image_yscale = 0.9;
        i.damage = bulletDamage + round(random(damageRange*2)) - damageRange;
        i.image_angle = random(360);
        i.direction += random(spread*2) - spread;
        self.shootCooldown = 4;
        }
    }
    
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If holding a berry...
if (global.characterSelected != "Leang"){
    if (global.holdingBerry &gt;= 3){
        image_index = 3;
    }
    else{
        image_index = global.holdingBerry;
    }
}

if (global.holdingBerry &gt; global.berryLimit){
    global.holdingBerry = global.berryLimit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collecting Strawberries
if (global.pause == false){
if (distance_to_object(obj_strawBerry) &lt;= 2 &amp;&amp; global.holdingBerry &lt; global.berryLimit){
    var i, type;
    i = instance_nearest(self.x,self.y,obj_strawBerry);
    type = i.type;
    global.holdingBerry += 1;
    global.xp += 1;
    if (type == 1){
        var e;
        e = instance_create(obj_player.x,obj_player.y, draw_healtext);
        e.damageHealed = i.healAmount;
        global.hp += i.healAmount;
    }
    shiftPickupList("Strawberry",1);
    shiftPickupList("EXP", 1);
    with (instance_nearest(self.x,self.y,obj_strawBerry)){
        instance_destroy();
    }
    
    
}
else if (distance_to_object(obj_strawBerry) &lt;= 2 &amp;&amp; global.holdingBerry &gt;= global.berryLimit){
        if (!instance_exists(toomanyberries)){
            instance_create(0,0,toomanyberries);
        }
        else {
            toomanyberries.duration = 256;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Getting hit by enemies projectiles
if (global.pause == false){
if (distance_to_object(obj_enemyproj) &lt; 2){
    invulFrames = global.invulFrames;
    var i,j,p, trueDamageTaken;
    i = instance_nearest(x,y,obj_enemyproj);
        j = floor(random(i.damage/2));
        
        trueDamageTaken = round(i.damage/2 + j);
        
        p = instance_create(x,y,draw_damagetext);
        p.owner = self;
        p.damageTaken = trueDamageTaken;
        global.hp -= trueDamageTaken;
        with i{
            instance_destroy();
    }
}
if (distance_to_object(obj_philipproj) &lt; 2){
    invulFrames = global.invulFrames;
    var i,j,p, trueDamageTaken;
    i = instance_nearest(x,y,obj_philipproj);
        j = floor(random(i.damage/2));
        
        trueDamageTaken = round(i.damage/2 + j);
        
        p = instance_create(x,y,draw_damagetext);
        p.owner = self;
        p.damageTaken = trueDamageTaken;
        global.hp -= trueDamageTaken;
        with i{
            instance_destroy();
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Random Quotes
if (global.pause == false){
if (randomQuoteTimer &gt; 0){
    randomQuoteTimer--;
}

if (randomQuoteTimer &lt;= 0){
    if (Quote == 0){
        shiftPickupList("QuoteFirst",0);
        Quote++;
    }
    else if (Quote &gt;0){
        if (global.characterSelected == "Borad"){
            shiftPickupList("Quote",floor(random(array_length_1d(global.quotes))));
        }
        else 
        if (global.characterSelected == "Delgado"){
            shiftPickupList("Quote2",floor(random(array_length_1d(global.quotes2))));
        }
        else 
        if (global.characterSelected == "Leang"){
            shiftPickupList("Quote3",floor(random(array_length_1d(global.quotes3))));
        }
    }
    randomQuoteTimer = 640 + ceil(random(20) * 64);
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swap weapons
if (global.pause == false){
if (global.buildmode == false &amp;&amp; clickCD &lt;= 0 &amp;&amp; buildCooldown &lt;= 0){
    if (keyboard_check_pressed(ord('1')) &amp;&amp; global.weaponOwned[0,0] == true){
        global.weaponselected = 1;
        clickCD = 2;
        shootcooldown = 64;
        reloadTimer = 0;
    }
    else if (keyboard_check_pressed(ord('1')) &amp;&amp; global.weaponOwned[0,0] == false){
        shiftPickupList("noWeaponOwned", 0);
    }
    if (keyboard_check_pressed(ord('2')) &amp;&amp; global.weaponOwned[1,0] == true){
        global.weaponselected = 2;
        clickCD = 2;
        shootcooldown = 64;
        reloadTimer = 0;
    }
    else if (keyboard_check_pressed(ord('2')) &amp;&amp; global.weaponOwned[1,0] == false){
        shiftPickupList("noWeaponOwned", 1);
    }
    if (keyboard_check_pressed(ord('3')) &amp;&amp; global.weaponOwned[2,0] == true){
        global.weaponselected = 3;
        clickCD = 2;
        shootcooldown = 64;
        reloadTimer = 0;
    }
    else if (keyboard_check_pressed(ord('3')) &amp;&amp; global.weaponOwned[2,0] == false){
        shiftPickupList("noWeaponOwned", 2);
    }
    if (keyboard_check_pressed(ord('4')) &amp;&amp; global.weaponOwned[3,0] == true){
        global.weaponselected = 4;
        clickCD = 2;
        shootcooldown = 64;
        reloadTimer = 0;
    }
    else if (keyboard_check_pressed(ord('4')) &amp;&amp; global.weaponOwned[3,0] == false){
        shiftPickupList("noWeaponOwned", 3);
    }
    if (keyboard_check_pressed(ord('5')) &amp;&amp; global.weaponOwned[4,0] == true){
        global.weaponselected = 5;
        clickCD = 2;
        shootcooldown = 64;
        reloadTimer = 0;
    }
    else if (keyboard_check_pressed(ord('5')) &amp;&amp; global.weaponOwned[4,0] == false){
        shiftPickupList("noWeaponOwned", 4);
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swap construct 
if (global.pause == false){
if (global.buildmode == true &amp;&amp; clickCD &lt;= 0 &amp;&amp; buildCooldown &lt;= 0){
    if (keyboard_check_pressed(ord('1')) &amp;&amp; global.constructOwned[0,1] == true){
        global.constructSelected = 0;
        clickCD = 2;
        shootcooldown = 64;
    }
    else if (keyboard_check_pressed(ord('1')) &amp;&amp; global.constructOwned[0,1] == false){
        shiftPickupList("noConstructOwned", 0);
    }
    if (keyboard_check_pressed(ord('2')) &amp;&amp; global.constructOwned[1,1] == true){
        global.constructSelected = 1;
        clickCD = 2;
        shootcooldown = 64;
    }
    else if (keyboard_check_pressed(ord('2')) &amp;&amp; global.constructOwned[1,1] == false){
        shiftPickupList("noConstructOwned", 1);
    }
    if (keyboard_check_pressed(ord('3')) &amp;&amp; global.constructOwned[2,1] == true){
        global.constructSelected = 2;
        clickCD = 2;
        shootcooldown = 64;
    }
    else if (keyboard_check_pressed(ord('3')) &amp;&amp; global.constructOwned[2,1] == false){
        shiftPickupList("noConstructOwned", 2);
    }
    if (keyboard_check_pressed(ord('4')) &amp;&amp; global.constructOwned[3,1] == true){
        global.constructSelected = 3;
        clickCD = 2;
        shootcooldown = 64;
    }
    else if (keyboard_check_pressed(ord('4')) &amp;&amp; global.constructOwned[3,1] == false){
        shiftPickupList("noConstructOwned", 3);
    }
    if (keyboard_check_pressed(ord('5')) &amp;&amp; global.constructOwned[4,1] == true){
        global.constructSelected = 4;
        clickCD = 2;
        shootcooldown = 64;
    }
    else if (keyboard_check_pressed(ord('5')) &amp;&amp; global.constructOwned[4,1] == false){
        shiftPickupList("noConstructOwned", 4);
    }
    if (keyboard_check_pressed(ord('6')) &amp;&amp; global.constructOwned[5,1] == true){
        global.constructSelected = 5;
        clickCD = 2;
        shootcooldown = 64;
    }
    else if (keyboard_check_pressed(ord('6')) &amp;&amp; global.constructOwned[5,1] == false){
        shiftPickupList("noConstructOwned", 4);
    }
    if (keyboard_check_pressed(ord('7')) &amp;&amp; global.constructOwned[5,1] == true){
        global.constructSelected = 6;
        clickCD = 2;
        shootcooldown = 64;
    }
    else if (keyboard_check_pressed(ord('6')) &amp;&amp; global.constructOwned[5,1] == false){
        shiftPickupList("noConstructOwned", 4);
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Build constructs
if (global.pause == false){
if (keyboard_check_pressed(ord('E'))){
    if (global.buildmode == false){
        global.buildmode = true;
        clickCD = 4;
    }
    else if (global.buildmode == true){
        global.buildmode = false;
        clickCD = 4;
    }
}
if (!instance_exists(obj_buildSpot) &amp;&amp; global.buildmode == true){
    instance_create(mouse_x,mouse_y,obj_buildSpot);
}
else if (global.buildmode == false &amp;&amp; instance_exists(obj_buildSpot)){
    with obj_buildSpot{
        instance_destroy();
    }
}

//Check if it is time to finish building the construct
if (buildCooldown == 1 &amp;&amp; global.buildmode == true){
    switch (global.constructSelected){
        case 0:
            instance_create(obj_buildSpot.x,obj_buildSpot.y,obj_floorspikes);
            global.constructOwned[0,2]--; 
        break;
        case 1:
            instance_create(obj_buildSpot.x,obj_buildSpot.y,obj_boxwall);
            global.constructOwned[1,2]--; 
        break;
        case 2:
            instance_create(obj_buildSpot.x,obj_buildSpot.y,obj_truewall);
            global.constructOwned[2,2]--; 
        break;
        case 3:
            instance_create(obj_buildSpot.x,obj_buildSpot.y,obj_turret);
            global.constructOwned[3,2]--; 
        break;
        case 4:
            instance_create(obj_buildSpot.x,obj_buildSpot.y,obj_icyturret);
            global.constructOwned[4,2]--; 
        break;
        case 5:
            instance_create(obj_buildSpot.x,obj_buildSpot.y,obj_boxpower);
            global.constructOwned[5,2]--; 
        break;
        case 6:
            instance_create(obj_buildSpot.x,obj_buildSpot.y,obj_healbox);
            global.constructOwned[5,2]--; 
        break;
    }
    building = false;
}
//Check if player wants to place the construct
if (mouse_check_button(mb_left) &amp;&amp; global.buildmode == true &amp;&amp; global.canBuild &amp;&amp; buildCooldown &lt;= 0){
    switch (global.constructSelected){
        case 0:
        if (global.constructOwned[0,2] &gt;= 1){
            buildCooldown = maxBuildCooldown;
        }
        else if (relayMessage &lt;= 0){
            shiftPickupList("noMoreConstructOwned",0);
            relayMessage = maxRelayMessage;
        }
        break;
        case 1:
        if (global.constructOwned[1,2] &gt;= 1){
            buildCooldown = maxBuildCooldown;
        }
        else if (relayMessage &lt;= 0){
            shiftPickupList("noMoreConstructOwned",0);
            relayMessage = maxRelayMessage;
        }
        break;
        case 2:
        if (global.constructOwned[2,2] &gt;= 1){
            buildCooldown = maxBuildCooldown;
        }
        else if (relayMessage &lt;= 0){
            shiftPickupList("noMoreConstructOwned",0);
            relayMessage = maxRelayMessage;
        }
        break;
        case 3:
        if (global.constructOwned[3,2] &gt;= 1){
            buildCooldown = maxBuildCooldown;
        }
        else if (relayMessage &lt;= 0){
            shiftPickupList("noMoreConstructOwned",0);
            relayMessage = maxRelayMessage;
        }
        break;
        case 4:
        if (global.constructOwned[4,2] &gt;= 1){
            buildCooldown = maxBuildCooldown;
        }
        else if (relayMessage &lt;= 0){
            shiftPickupList("noMoreConstructOwned",0);
            relayMessage = maxRelayMessage;
        }
        break;
        case 5:
        if (global.constructOwned[5,2] &gt;= 1){
            buildCooldown = maxBuildCooldown;
        }
        else if (relayMessage &lt;= 0){
            shiftPickupList("noMoreConstructOwned",0);
            relayMessage = maxRelayMessage;
        }
        break;
        case 6:
        if (global.constructOwned[6,2] &gt;= 1){
            buildCooldown = maxBuildCooldown;
        }
        else if (relayMessage &lt;= 0){
            shiftPickupList("noMoreConstructOwned",0);
            relayMessage = maxRelayMessage;
        }
        break;
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crafting
if (distance_to_object(obj_anvil) &lt; 12){
    obj_anvil.image_index = 1;
    
}
else{
    obj_anvil.image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_campfire">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This one is for 32x32 horizontal and vertical walls ONLY
var xDif, yDif;
xDif = x - other.x;
yDif = y - other.y;

if abs(xDif)&gt;abs(yDif)
{
x = other.x + sign(xDif) * 32;
}
else
{
y = other.y + sign(yDif) * 32;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_boxpower">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This one is for 32x32 horizontal and vertical walls ONLY
var xDif, yDif;
xDif = x - other.x;
yDif = y - other.y;

if abs(xDif)&gt;abs(yDif)
{
x = other.x + sign(xDif) * 32;
}
else
{
y = other.y + sign(yDif) * 32;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_truewall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This one is for 32x32 horizontal and vertical walls ONLY
var xDif, yDif;
xDif = x - other.x;
yDif = y - other.y;

if abs(xDif)&gt;abs(yDif)
{
x = other.x + sign(xDif) * 32;
}
else
{
y = other.y + sign(yDif) * 32;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_boxwall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This one is for 32x32 horizontal and vertical walls ONLY
var xDif, yDif;
xDif = x - other.x;
yDif = y - other.y;

if abs(xDif)&gt;abs(yDif)
{
x = other.x + sign(xDif) * 32;
}
else
{
y = other.y + sign(yDif) * 32;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_healbox">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This one is for 32x32 horizontal and vertical walls ONLY
var xDif, yDif;
xDif = x - other.x;
yDif = y - other.y;

if abs(xDif)&gt;abs(yDif)
{
x = other.x + sign(xDif) * 32;
}
else
{
y = other.y + sign(yDif) * 32;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_icyturret">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This one is for 32x32 horizontal and vertical walls ONLY
var xDif, yDif;
xDif = x - other.x;
yDif = y - other.y;

if abs(xDif)&gt;abs(yDif)
{
x = other.x + sign(xDif) * 32;
}
else
{
y = other.y + sign(yDif) * 32;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_turret">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This one is for 32x32 horizontal and vertical walls ONLY
var xDif, yDif;
xDif = x - other.x;
yDif = y - other.y;

if abs(xDif)&gt;abs(yDif)
{
x = other.x + sign(xDif) * 32;
}
else
{
y = other.y + sign(yDif) * 32;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This one is for 32x32 horizontal and vertical walls ONLY
var xDif, yDif;
xDif = x - other.x;
yDif = y - other.y;

if abs(xDif)&gt;abs(yDif)
{
x = other.x + sign(xDif) * 32;
}
else
{
y = other.y + sign(yDif) * 32;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This one is for 32x32 horizontal and vertical walls ONLY
var xDif, yDif;
xDif = x - other.x;
yDif = y - other.y;

if abs(xDif)&gt;abs(yDif)
{
x = other.x + sign(xDif) * 32;
}
else
{
y = other.y + sign(yDif) * 32;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This one is for 32x32 horizontal and vertical walls ONLY
var xDif, yDif;
xDif = x - other.x;
yDif = y - other.y;

if abs(xDif)&gt;abs(yDif)
{
x = other.x + sign(xDif) * 32;
}
else
{
y = other.y + sign(yDif) * 32;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This one is for 32x32 horizontal and vertical walls ONLY
var xDif, yDif;
xDif = x - other.x;
yDif = y - other.y;

if abs(xDif)&gt;abs(yDif)
{
x = other.x + sign(xDif) * 32;
}
else
{
y = other.y + sign(yDif) * 32;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if (distance_to_object(obj_anvil) &lt; 12){
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_font(craftText_text);
    draw_set_color(c_black);
    draw_text(x,y + 42, "Press C to craft");
    
}
else{
    obj_anvil.image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>26,21</point>
    <point>26,26</point>
  </PhysicsShapePoints>
</object>
