<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_healdispenser</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>17</depth>
  <persistent>0</persistent>
  <parentName>construct_superclass</parentName>
  <maskName>mask_turret</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>durability = 60;
maxdurability = durability;
invulFrames = 0;
maxInvulFrames = 64;
image_speed = 0;
image_index = 0;
powered = false;
powerSource = noone;
powerRange = 500;

timeLeft = 0;
maxTimeLeft = 64;
if (global.characterSelected == "Leang"){
    durability *= 1.5;
}
healAmount = 8;
healCooldown = 0;
maxHealCooldown = 64;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///It's survival time left
if (durability &lt;= 0) instance_destroy();
if (durability / maxdurability &gt;= 0.50){
    image_alpha = 1;
}
else if (durability / maxdurability &lt; 0.50){
    image_alpha = 0.5 + durability/maxdurability;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for a power source nearby

if (distance_to_object(obj_boxpower) &lt;= powerRange){
    powered = true;
    powerSource = instance_nearest(x,y,obj_boxpower);
}
else {
    powered = false;
    powerSource = noone;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checks for bullets hitting the wall
if (distance_to_object(obj_pebbleproj) &lt; 1){
    with instance_nearest(x,y,obj_pebbleproj){
        instance_destroy();
    }
}
if (distance_to_object(obj_pebbleproj2) &lt; 3){
    with instance_nearest(x,y,obj_pebbleproj2){
        instance_destroy();
    }
}
if (distance_to_object(obj_pebbleproj3) &lt; 1){
    with instance_nearest(x,y,obj_pebbleproj3){
        instance_destroy();
    }
}
if (distance_to_object(obj_turretproj) &lt; 1){
    with instance_nearest(x,y,obj_turretproj){
        instance_destroy();
    }
}
if (distance_to_object(obj_icyturretproj) &lt; 1){
    with instance_nearest(x,y,obj_icyturretproj){
        instance_destroy();
    }
}
if (distance_to_object(obj_enemyproj) &lt; 1){
    durability--;
    with instance_nearest(x,y,obj_enemyproj){
        instance_destroy();
    }
}
if (distance_to_object(obj_philipproj) &lt; 1){
    durability--;
    with instance_nearest(x,y,obj_philipproj){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Healing
if (global.pause == false){
if  (healCooldown &gt; 0){
    healCooldown--;
}

if (healCooldown &lt;= 0 &amp;&amp; powered == true &amp;&amp; distance_to_point(obj_player.x,obj_player.y) &lt; 95 &amp;&amp; global.hp &lt; global.maxhp){
    global.hp += healAmount;
    healCooldown = maxHealCooldown;
    durability -= 1;
    var e = instance_create(obj_player.x,obj_player.y, draw_healtext);
    e.damageHealed = healAmount;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();


if (distance_to_object(obj_boxpower) &lt;= powerRange){
    powered = true;
    powerSource = instance_nearest(x,y,obj_boxpower);
}
else {
    powered = false;
    powerSource = noone;
}


if (powered == true &amp;&amp; powerSource != noone){
    draw_sprite_ext(spr_wire,0,x,y - 10,distance_to_point(powerSource.x,powerSource.y)+12,1,point_direction(x,y,powerSource.x,powerSource.y + 3),c_white,1);
    draw_sprite(spr_healcircle,0,x,y);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
